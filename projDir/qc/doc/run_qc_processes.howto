Notes on running scripts for QC processes

#################################################################
# Environment is set in:
#
  ~/git/HCR_configuration/projDir/system/params/project_info
#
# which sets up, for example:
#
  PROJ_DIR = ~/git/HCR_configuration/projDir
  DATA_DIR = /scr/snow2/rsfdata/projects/socrates/hcr
  QC_VERSION = qc2 (or whatever)
#
# This file will be edited and changed for each qc run.
 
#################################################################
# run TsStatusMonitor
#
# Create Spdb data base of monitoring data, which includes
# temperatures. These are used for correcting the rx gain.
#
# This step reads the time series and stores the monitoring data
# in spdb.
#
# This data does not change between qc versions - it is the field
# data. So this procedure is only run once per project.
#
# The results are written to:
#
#   $DATA_DIR/spdb/monitor/qc
#
# As an example, for socrates:

cd ~/git/HCR_configuration/projDir/qc/scripts
./run_TsStatusMonitor.qc.socrates

# and the results are in:

/scr/snow2/rsfdata/projects/socrates/hcr/spdb/monitor/qc

#################################################################
# Translate temperature data into csv text files, from SPDB monitoring
# data.
#
# Run SpdbXml2Table, to produce space-delimited text file
# containing temps.
#
# For example, for socrates we would run:

source $PROJ_DIR/system/params/project_info.socrates
cd $PROJ_DIR/qc/params
SpdbXml2Table -params SpdbXml2Table.temps -debug  -start "2018 01 15 00 00 00" -end "2018 02 28 00 00 00" > $DATA_DIR/txt/SOCRATES.temperatures.txt 

# This creates the file:

$DATA_DIR/txt/SOCRATES.temperatures.txt   

#################################################################
# LNA and pod temperature analysis
#
# analyze temperatures and powers from noise source cals
#
# As an example:
#   input data is in $DATA_DIR/txt/SOCRATES.temperatures.txt
#
# Run Matlab to read moments, correlate with temps.
# 
# Make an input file with all the cal events and put it in $PROJ_DIR/qc/dataProcessing/nsCal/inFiles
#
# Run $PROJ_DIR/qc/dataProcessing/nsCal/determine_LNA_tempSlope.m
# and then
# $PROJ_DIR/qc/dataProcessing/nsCal/determine_Pod_tempSlope.m
#
#   Results file is: $PROJ_DIR/qc/dataProcessing/nsCal/inFiles/tempsTable_socrates.txt
#

###################################################################
# Run HcrTempRxGain to compute gain change with temp
#
# You need to edit the parameter file and copy in the results from
# the previous step.
#
# There is a separate parameter file for each project, because the
# gain values are analyzed per project.
#
# Input temp data is from the TsStatusMonitor step:
#   $DATA_DIR/spdb/monitor/qc
#
#     Input data is time series in:
#       /scr/rain1/rsfdata/projects/socrates/hcr/time_series/wband/save
#     Output is XML stored in SPDB in:
#       $DATA_DIR/$QC_VERSION/spdb/tempVsGain
#
# For examples, for socrates qc2, output data is in:

/scr/snow2/rsfdata/projects/socrates/hcr/qc2/spdb/tempVsGain

#################################################################
#################################################################
# Rerun time series
# !!!! This step is only needed when major corrections are required.!!!!!
#################################################################
  
# Dsr2Radx and Iq2Dsr - 100 hz
#
# Iq2Dsr
#
# Iq2Dsr reads time series and computes moments
# corrects gain for temperatures
# corrects spectral widths
# corrects altitude for deviation from ellipsoid
# corrects velocities for aircraft motion (vertical and horizontal)
#
# writes 100hz moments data to FMQ (file message queue)
#
# Dsr2Radx
#
# Save out 100Hz moments files in CfRadial
#
# NOTE: start this script first because it will wait for output from Iq2Dsr

# There is a script set up to run start both processes in the right order:

cd ~/git/HCR_configuration/projDir/qc/scripts
./run_qc.100hz.socrates

# It does the following:
./run_Dsr2Radx.qc.100hz.socrates
./run_Iq2Dsr.qc.100hz.socrates

# NOTE: to kill this step run:
./kill_qc.100hz.socrates
# or
snuff run_Dsr2Radx.qc.100hz.socrates
snuff "Dsr2Radx -params Dsr2Radx.qc.100hz"
snuff run_Iq2Dsr.qc.100hz.socrates
snuff "Iq2Dsr -params Iq2Dsr.qc.100hz.socrates"

#################################################################
#################################################################
# Run RadxCalUpdate.qc.100hz
#
# This updates the calibration if necessary, adjusts the calibration gain
# for temperature variations, and fixes the altitudes.
#
# Set up the params file
cd ~/git/HCR_configuration/projDir/qc/params
RadxCalUpdate.qc.100hz.spicule

# Modify and run the run script
cd ~/git/HCR_configuration/projDir/qc/scripts
./run_RadxCalUpdate.qc.100hz.spicule

# Output is the 100hz data in the QC_VERSION directory

#################################################################
# Check tempereature correction
# To check if the temperature correction from the previous step
# worked as expected, run

$PROJ_DIR/qc/dataProcessing/nsCal/check_NSCAL.m

# In the generated figure, there should be no more temperature dependency.

#################################################################
# RadxDwellCombine - combine 100hz data into 10hz dwells
#
# NOTE: the velocity in these moments are only corrected for the
# motion of the aircraft.

cd ~/git/HCR_configuration/projDir/qc/scripts
./run_RadxDwellCombine.qc.10hz

#################################################################
# Check altitude correction
# Run this procedure for the field and qc data and check the improvement
#
# Modify and run $PROJ_DIR/qc/dataProcessing/altitudeCorr/plotAltDiff.m
  
#################################################################
# Trimm down times
# Make data copy with selected times we want in the final dataset. Run
$PROJ_DIR/qc/scripts/run_RadxConvert.qc.select_times.spicule

# This will put the selected timess in
# $DATA_DIR/QC_VERSION/cfradial/selected_times

# We make another copy of selected_times to
# $DATA_DIR/QC_VERSION/cfradial/v1.0_full
# Where the model data, flag field, etc. will be added
# selected_times is a backup which can be copied to v1.0
# again if something goes wrong during the addition of the
# additional fields.

#################################################################
Interpolate topography data
# Modify and run $PROJ_DIR/qc/dataProcessing/HCRproducts/topoData/topo2HCR.m

# It needs an input file with the start and end dates of each flight
# $PROJ_DIR/qc/dataProcessing/scriptsFiles/flights_socrates_data.txt

# To Write data to files run
# $PROJ_DIR/qc/dataProcessing/HCRproducts/topoData/cfradialTopo.m

#################################################################
# VEL_CORR

# Find out which poly order to use by running
$PROJ_DIR/qc/dataProcessing/HCRproducts/velCorr/plotVelCorr_findPoly.m

# To make the VEL_CORR field, modify and run
$PROJ_DIR/qc/dataProcessing/HCRproducts/velCorr/make_VEL_CORR_wholeFlights.m
# The filter lenght can be adjusted in this file. To test out 
# different filter lenghts, run
$PROJ_DIR/qc/dataProcessing/HCRproducts/velCorr/plotVelCorr_findPoly.m
# on a few test cases.

# To add it to the cfradial files, run
$PROJ_DIR/qc/dataProcessing/HCRproducts/velCorr/cfradialVelCorr.m

#################################################################
# FLAG field and DBZ_masked
# To create the flag field, run
$PROJ_DIR/qc/dataProcessing/HCRproducts/flag/makeFlagField_wholeFlights.m

# To add it to the cfradial files, run
$PROJ_DIR/qc/dataProcessing/HCRproducts/flag/cfradialFlagfield.m

# To add a DBZ field that has only cloud data, run
$PROJ_DIR/qc/dataProcessing/HCRproducts/flag/cfradialDBZmasked.m

#################################################################
# Interpolate forecast or reanalysis data
# 
# Modify and run $PROJ_DIR/qc/dataProcessing/HCRproducts/modelData/model2HCR4d.m

# It needs an input file with the start and end dates of each flight
# $PROJ_DIR/qc/dataProcessing/scriptsFiles/flights_socrates_data.txt

# It also needs model input data from eather ecmwf forecasts or
# era5 reanalysis which are in

cd $DATA_DIR
cd ../model/era5

# Output is in .mat files in

cd $DATA_DIR
cd ../model/era5interp/10hz

#################################################################
# Add model data
# Add model data to cfradial files in
# $DATA_DIR/QC_VERSION/cfradial/final

# Run
$PROJ_DIR/qc/dataProcessing/HCRproducts/modelData/cfradialModel.m

#################################################################
# Correct corrupted LDR
# In SPICULE we had a problem with the H channel which corrupted
# LDR. To correct this problem, run
$PROJ_DIR/qc/dataProcessing/other/filterHX/filterHX.m

# To created corrected and masked LDR field, run
$PROJ_DIR/qc/dataProcessing/other/filterHX/cfradialLDRmasked.m

#################################################################
# De-alias velocity

# To de-alias velocity and mask out and non-cloud
# data run

$PROJ_DIR/qc/dataProcessing/HCRproducts/VELdeAliasing/call_VELdeAlias_wholeFlights.m

# To add it to the dataset run
$PROJ_DIR/qc/dataProcessing/HCRproducts/VELdeAliasing/cfradialVELunfolded.m

#################################################################
# Mask out non vertical angles in VEL

# Velocity is not of much use when the pointing angle is not vertical.
# To mask out non-vertical data run

$PROJ_DIR/qc/dataProcessing/HCRproducts/flag/cfradialVELmasked.m

#################################################################
# Add melting layer

# Adjust and run
$PROJ_DIR/qc/dataProcessing/HCRproducts/meltingLayer/call_meltLayer_wholeFlights.m

# To add id to the dataset run
$PROJ_DIR/qc/dataProcessing/HCRproducts/meltingLayer/cfradialMeltLayer.m

#################################################################
# Create final subset

# Once all fields have been added we create a dataset version that
# has only fields that are useful to the users. Run

$PROJ_DIR/qc/scripts/run_RadxConvert.qc.select_fields.spicule

# This will put the selected timess in
# $DATA_DIR/QC_VERSION/cfradial/selected_fields
# which can then be renamed to e.g. v1.0

################################################################
# Sea Surface Cal

# To check the sea surface calfor ssCal events, run
$PROJ_DIR/qc/dataProcessing/determine_bias.m

# With the start and end dates of
$PROJ_DIR/qc/dataProcessing/biasInFiles/cal_socrates_era5file.txt

# To run nadir pointing ssCal for whole flights:
$PROJ_DIR/qc/dataProcessing/determine_bias_nadir.m

#################################################################
# Copy HSRL moments data into HCR QC data area - 2Hz data
#
# The HSRL moments are computed using pythons scripts in the
# HSRL project:
#   https://github.com/ncar/hsrl_configuration
# Check that repo for docs on the specifics of that processing.
#
# The moments computed above are referred to as the python_moments.
#
# When that processing is complete, the files are copied in to
# the HCR_configuration project area, for inclusion in the HCR
# QC processing.
#
# For example, for socrates, we ran the following:
#
source ~/hcrProjDir/system/params/project_info.socrates
mkdir -p $DATA_DIR/$QC_VERSION/hsrl/python_moments
cd /scr/snow2/rsfdata/projects/socrates/hsrl/qc/mhayman_moments
rsync -av * $DATA_DIR/$QC_VERSION/hsrl/python_moments

#################################################################
# Convert python moments to CfRadial - 2Hz data
#
# Run Hsrl2Radx to convert python-generated moments to CfRadial.
#
# This will write data to:
#  $DATA_DIR/$QC_VERSION/cfradial/hsrl_moments/2hz
#
# For example, for socrates:
#
cd ~/hcrProjDir/qc/scripts/
run_Hsrl2Radx.qc.2hz.cset
# or
run_Hsrl2Radx.qc.2hz.socrates
#################################################################
# Merge 2Hz HCR final moments with 2Hz HSRL moments
#
# Run MergeHcrAndHsr to merge HCR and HSRL 2 Hz moments
#
# We preserve the model-based fields from HCR.
# And only use the HSRL moments from the HSRL files, ignoring
# HSRL model-based fields.
#
# This will write data to:
#  $DATA_DIR/$QC_VERSION/cfradial/hsrl_merge/2hz
#
# For example, for socrates:
#
cd ~/hcrProjDir/qc/scripts/
run_MergeHcrAndHsrl.qc.2hz.cset
# or
run_MergeHcrAndHsrl.qc.2hz.socrates





