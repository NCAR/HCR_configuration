/**********************************************************************
 * TDRP params for MergeHcrAndHsrl
 **********************************************************************/

//======================================================================
//
// Merges field data from HCR and HSRL instruments. HCR is the primary 
//   instrument, we merge the HSRL onto the HCR data.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
//
// This application registers with procmap. This is the instance used 
//   for registration.
//
//
// Type: string
//

instance = "qc.2hz";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program waits for a new input file.  In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line. Paths (in FILELIST mode, at 
//   least) MUST contain a day-directory below the data file -- 
//   ./data_file.ext will not work as a file path.
//
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//

mode = ARCHIVE;

///////////// max_realtime_data_age_secs //////////////
//
// Maximum age of realtime data (secs).
//
// Only data less old than this will be used.
//
//
// Type: int
//

max_realtime_data_age_secs = 300;

//======================================================================
//
// DATA LOCATIONS.
//
// HCR is the primary data set, and the HCR data files are read in 
//   first. Then the associate HSRL data is found, and merged into the HCR 
//   data set.
//
//======================================================================
 
///////////// hcr_data_dir ////////////////////////////
//
// Directory for HCR data files.
//
// These are in CfRadial format.
//
//
// Type: string
//

hcr_data_dir = "$(DATA_DIR)/$(QC_VERSION)/cfradial/final/2hz";

///////////// hsrl_data_dir ///////////////////////////
//
// Directory for HSRL data files.
//
// These are in CfRadial format.
//
//
// Type: string
//

hsrl_data_dir = "$(DATA_DIR)/$(QC_VERSION)/cfradial/hsrl_moments/2hz";

///////////// file_match_time_tolerance_sec ///////////
//
// Time tolerance for matching the HSRL files to the HCR files (secs).
//
// Only files within this tolerance will be matched.
//
//
// Type: double
//

file_match_time_tolerance_sec = 900;

///////////// ray_match_time_tolerance_sec ////////////
//
// Time tolerance for matching the HSRL rays to the HCR rays (secs).
//
// Only rays within this tolerance are used.
//
//
// Type: double
//

ray_match_time_tolerance_sec = 0.25;

///////////// ray_match_elevation_tolerance_deg ///////
//
// Angular elevation tolerance for matching the HSRL rays to the HCR 
//   rays (deg).
//
// Only rays within this tolerance are used. The HSRL points 4 degrees 
//   off vertical, so this values should always be > 4. Also, when the 
//   aircraft banks, the HSRL elevation changes, whereas the HCR antenna 
//   control should keep the beam vertical.
//
//
// Type: double
//

ray_match_elevation_tolerance_deg = 10;

//======================================================================
//
// SPECIFYING FIELDS TO COPY FROM EACH SOURCE.
//
//======================================================================
 
///////////// hcr_fields //////////////////////////////
//
// Specs of HCR fields to be included.
//

//
// input_field_name: name of field in input file.
//
// output_field_name: name of field in output file.
//
// encoding: output encoding for the field.
//
// apply_flag: apply HCR flag field to censor non-weather echoes. See 
//   'hcr_flag_field_name' and 'hcr_flag_values' parameters below.
//
//
// Type: struct
//   typedef struct {
//      string input_field_name;
//      string output_field_name;
//      boolean apply_flag;
//   }
//
// 1D array - variable length.
//

hcr_fields = {
  {
    input_field_name = "DBZ",
    output_field_name = "HCR_DBZ",
    apply_flag = TRUE
  }
  ,
  {
    input_field_name = "VEL_CORR",
    output_field_name = "HCR_VEL",
    apply_flag = TRUE
  }
  ,
  {
    input_field_name = "WIDTH",
    output_field_name = "HCR_WIDTH",
    apply_flag = TRUE
  }
  ,
  {
    input_field_name = "LDR",
    output_field_name = "HCR_LDR",
    apply_flag = TRUE
  }
  ,
  {
    input_field_name = "NCP",
    output_field_name = "HCR_NCP",
    apply_flag = TRUE
  }
  ,
  {
    input_field_name = "SNR",
    output_field_name = "HCR_SNR",
    apply_flag = TRUE
  }
  ,
  {
    input_field_name = "DBMVC",
    output_field_name = "HCR_DBMVC",
    apply_flag = FALSE
  }
  ,
  {
    input_field_name = "PRESS",
    output_field_name = "PRESS",
    apply_flag = FALSE
  }
  ,
  {
    input_field_name = "TEMP",
    output_field_name = "TEMP",
    apply_flag = FALSE
  }
  ,
  {
    input_field_name = "RH",
    output_field_name = "RH",
    apply_flag = FALSE
  }
  ,
  {
    input_field_name = "SST",
    output_field_name = "SST",
    apply_flag = FALSE
  }
  ,
  {
    input_field_name = "TOPO",
    output_field_name = "TOPO",
    apply_flag = FALSE
  }
  ,
  {
    input_field_name = "U_SURF",
    output_field_name = "U_SURF",
    apply_flag = FALSE
  }
  ,
  {
    input_field_name = "V_SURF",
    output_field_name = "V_SURF",
    apply_flag = FALSE
  }
};

///////////// hcr_flag_field_name /////////////////////
//
// Name of flag field in HCR data - if available.
//
// See hcr_fields above. We can optionally use the flag field to censor 
//   non-weather data from the HCR fields.
//
//
// Type: string
//

hcr_flag_field_name = "FLAG";

///////////// hcr_valid_flag_values ///////////////////
//
// Array of flag values that indicate the a valid echo.
//
// If 'apply_flag' is TRUE (see 'hcr_fields' above) we check the flag 
//   values at each gate and censor the field if the flag value is not in 
//   this valid list.
//
//
// Type: int
// 1D array - variable length.
//

hcr_valid_flag_values = {
 1
};

///////////// hsrl_fields /////////////////////////////
//
// Specs of HSRL fields to be included.
//

//
// input_field_name: name of field in input file.
//
// output_field_name: name of field in output file.
//
// encoding: output encoding for the field.
//
//
// Type: struct
//   typedef struct {
//      string input_field_name;
//      string output_field_name;
//   }
//
// 1D array - variable length.
//

hsrl_fields = {
  {
    input_field_name = "Aerosol_Backscatter_Coefficient",
    output_field_name = "HSRL_Aerosol_Backscatter_Coefficient"
  }
  ,
  {
    input_field_name = "Backscatter_Ratio",
    output_field_name = "HSRL_Backscatter_Ratio"
  }
  ,
  {
    input_field_name = "Particle_Depolarization",
    output_field_name = "HSRL_Particle_Depolarization"
  }
  ,
  {
    input_field_name = "Particle_Linear_Depolarization_Ratio",
    output_field_name = "HSRL_Particle_Linear_Depolarization_Ratio"
  }
  ,
  {
    input_field_name = "Volume_Depolarization",
    output_field_name = "HSRL_Volume_Depolarization"
  }
  ,
  {
    input_field_name = "Volume_Linear_Depolarization_Ratio",
    output_field_name = "HSRL_Volume_Linear_Depolarization_Ratio"
  }
  ,
  {
    input_field_name = "Optical_Depth",
    output_field_name = "HSRL_Optical_Depth"
  }
  ,
  {
    input_field_name = "Aerosol_Extinction_Coefficient",
    output_field_name = "HSRL_Aerosol_Extinction_Coefficient"
  }
  ,
  {
    input_field_name = "Merged_Combined_Channel",
    output_field_name = "HSRL_Merged_Combined_Channel"
  }
  ,
  {
    input_field_name = "Raw_Cross_Polarization_Channel",
    output_field_name = "HSRL_Raw_Cross_Polarization_Channel"
  }
  ,
  {
    input_field_name = "Raw_Molecular_Backscatter_Channel",
    output_field_name = "HSRL_Raw_Molecular_Backscatter_Channel"
  }
};

//======================================================================
//
// OUTPUT DETAILS.
//
//======================================================================
 
///////////// compression_level ///////////////////////
//
// Compression level for output, if compressed.
//
// Applies to netCDF only. Dorade compression is run-length encoding, 
//   and has not options..
//
//
// Type: int
//

compression_level = 4;

///////////// output_encoding /////////////////////////
//
// Encoding for output fields.
//
// Encoding with smaller types improves compression.
//
//
// Type: enum
// Options:
//     ENCODING_FLOAT32
//     ENCODING_INT16
//

output_encoding = ENCODING_INT16;

//======================================================================
//
// OUTPUT DIRECTORY AND FILE NAME.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory path.
//
// Files will be written to this directory.
//
//
// Type: string
//

output_dir = "$(DATA_DIR)/$(QC_VERSION)/cfradial/hcr_hsrl_merge/2hz";

///////////// append_day_dir_to_output_dir ////////////
//
// Add the day directory to the output directory.
//
// Path will be output_dir/yyyymmdd/filename.
//
//
// Type: boolean
//

append_day_dir_to_output_dir = TRUE;

///////////// append_year_dir_to_output_dir ///////////
//
// Add the year directory to the output directory.
//
// Path will be output_dir/yyyy/yyyymmdd/filename.
//
//
// Type: boolean
//

append_year_dir_to_output_dir = FALSE;

