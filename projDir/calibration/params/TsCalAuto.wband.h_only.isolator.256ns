/**********************************************************************
 * TDRP params for TsCalAuto
 **********************************************************************/

//======================================================================
//
// TsCalAuto analyses radar calibration data.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_NORM;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "wband.h_only.isolator.256ns";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
//
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
//
//
// Type: boolean
//

register_with_procmap = FALSE;

//======================================================================
//
// TIME SERIES - INPUT DATA.
//
//======================================================================
 
///////////// input_fmq_path //////////////////////////
//
// Path to time series FMQ.
//
//
// Type: string
//

input_fmq_path = "/tmp/fmq/ts/wband/shmem_10000";

///////////// n_samples ///////////////////////////////
//
// Number of pulse samples to average for cal data.
//
//
// Type: int
//

n_samples = 20000;

///////////// start_gate //////////////////////////////
//
// Gate number for start of averaging.
//
//
// Type: int
//

start_gate = 100;

///////////// n_gates /////////////////////////////////
//
// Number of gates for averaging.
//
//
// Type: int
//

n_gates = 300;

///////////// fast_alternating_mode ///////////////////
//
// Is the radar running in dual-pol fast alternating mode?.
//
// If not, set to FALSE.
//
//
// Type: boolean
//

fast_alternating_mode = FALSE;

///////////// switching_receivers /////////////////////
//
// Does the system have switching receivers?.
//
// If the receiver path switched every pulse, i.e. to operate in 
//   co-polar and x-polar mode, set this to true.
//
//
// Type: boolean
//

switching_receivers = FALSE;

///////////// check_radar_id //////////////////////////
//
// Option to check the radar ID in the time series data stream.
//
// If TRUE, we will check that the radar_id in the header packet info is 
//   either the specified radar_id, or is 0. This allows us to filter out 
//   unwanted data from the time series stream. Mostly this is not 
//   applicable. However, in some cases time series data from multiple 
//   sources is included in a single stream, in which case we need to 
//   filter it accordingly.
//
//
// Type: boolean
//

check_radar_id = FALSE;

///////////// radar_id ////////////////////////////////
//
// radar_id to be used for filtering incoming data.
//
// See 'check_radar_id' above.
//
//
// Type: int
//

radar_id = 0;

//======================================================================
//
// SIGNAL GENERATOR CONTROL.
//
//======================================================================
 
///////////// siggen_tcp_port /////////////////////////
//
// TCP port for SIGGEN.
//
//
// Type: int
//

siggen_tcp_port = 5025;

///////////// siggen_ip_address ///////////////////////
//
// IP address for SIGGEN.
//
//
// Type: string
//

siggen_ip_address = "10.40.0.21";

///////////// siggen_max_power ////////////////////////
//
// Max power for siggen signal (dBm).
//
// -34.65 dBm - Benchtop cal dated 11132017 (Tsai)
// -34.3 dBm - Benchtop cal dated 09212018 (Tsai)
// -36.15 dBm - Benchtop cal dated 06192019 (Tsai)
//
// Type: double
//

siggen_max_power = -38.62;

///////////// siggen_min_power ////////////////////////
//
// Min power for siggen signal (dBm).
//
//
// Type: double
//

siggen_min_power = -116.93;

///////////// siggen_delta_power //////////////////////
//
// Power step for siggen (dBm).
//
//
// Type: double
//

siggen_delta_power = 5;

///////////// siggen_specify_power_sequence ///////////
//
// Option to specify the power sequence to use in the cal.
//
// If true, the siggen_power_sequence will be used. If false, the power 
//   will start at siggen_max_power and decrease to siggen_min_power, in 
//   steps of siggen_delta_power.
//
//
// Type: boolean
//

siggen_specify_power_sequence = TRUE;

///////////// siggen_power_sequence ///////////////////
//
// Min power for siggen signal (dBm).
//
//
// Type: double
// 1D array - variable length.
//

// siggen_power_sequence = {
//   -38.62,
//   -43.62,
//   -48.62,
//   -53.62,
//   -58.62,
//   -63.62,
//   -68.62,
//   -73.62,
//   -78.62,
//   -84.46,
//   -89.46,
//   -94.46,
//   -99.46,
//   -104.46,
//   -109.46,
//   -114.46,
//   -119.46
// };

siggen_power_sequence = {
  -38.62,
  -43.62,
  -48.62,
  -53.62,
  -58.62,
  -63.62,
  -68.62,
  -73.62,
  -78.62,
  -83.97,
  -88.97,
  -93.97,
  -98.97,
  -103.97,
  -108.97,
  -113.97,
  -118.97
};

///////////// set_sig_freq ////////////////////////////
//
// Switch to set the Frequency on the sig gen before starting.
//
// If the Test Pulse Manager is on, you probably don't want to reset it.
//
//
// Type: boolean
//

set_sig_freq = TRUE;

///////////// siggen_frequency ////////////////////////
//
// Siggen frequency (GHz).
//
// This should match the radar's frequency.
//
//
// Type: double
//

siggen_frequency = 94.40625;

///////////// siggen_cmd_delay ////////////////////////
//
// Siggen command delay (msec).
//
// Delay this ammount after each command to give the siggen time to 
//   stabilize a power change.
//
//
// Type: int
//

siggen_cmd_delay = 1000;

///////////// use_manual_siggen_control ///////////////
//
// Option to manually set the siggen.
//
// Use for testing etc.
//
//
// Type: boolean
//

use_manual_siggen_control = TRUE;

///////////// suspend_test_pulse //////////////////////
//
// Option to suspend the test pulse while the calibration is running.
//
// See TestPulse_pid_file.
//
//
// Type: boolean
//

suspend_test_pulse = FALSE;

///////////// TestPulse_pid_file //////////////////////
//
// File containing the process ID of the TestPulse Utility program.
//
// On Startup, this program suspends the operation of TestPulse by 
//   sending it a SIGUSR1. After Finishing, it restores TestPulse 
//   operation by sending it a SIGUSR2.
//
//
// Type: string
//

TestPulse_pid_file = "/tmp/TestPulse.pid";

//======================================================================
//
// CALIBRATION PROCEDURE PARAMETERS.
//
//======================================================================
 
///////////// radarName ///////////////////////////////
//
// Radar name.
//
//
// Type: string
//

radarName = "HCR";

///////////// radar_frequency /////////////////////////
//
// Radar frequency (GHz).
//
// If this is negative, the siggen_frequency will be used.
//
//
// Type: double
//

radar_frequency = 94.40625;

///////////// k_squared ///////////////////////////////
//
// Constant related to complex index of refraction, for water, at this 
//   frequency.
//
// Suggested values are:
// 	S-band: 0.93
// 	C-band: 0.93
// 	X-band: 0.92
// 	Ku-band: 0.90
// 	Ka-band: 0.88
// 	W-band: 0.84.
//
//
// Type: double
//

k_squared = 0.711;

///////////// xmitPowerDbmH ///////////////////////////
//
// Transmitter peak power H (dBm).
//
// Benchtop Cal dated 11132017 (Tsai) Pout = 59.22 dBm
// Benchtop Cal dated 06192019 (Tsai) Pout = 59.56 dBm
//
// Type: double
//

xmitPowerDbmH = 59.56;

///////////// xmitPowerDbmV ///////////////////////////
//
// Transmitter peak power V (dBm).
//
// Benchtop Cal dated 11132017 (Tsai) Pout = 59.77 dBm
// Benchtop Cal dated 06192019 (Tsai) Pout = 59.91 dBm
//
// Type: double
//

xmitPowerDbmV = 59.91;

///////////// pulseWidthUs ////////////////////////////
//
// Transmit pulse width (micro_secs).
//
//
// Type: double
//

pulseWidthUs = 0.256;

///////////// beamWidthDegH ///////////////////////////
//
// Antenna 3dB beam width H (deg).
//
// Measured Value, CMi, March 2019
//
// Type: double
//

beamWidthDegH = 0.73;

///////////// beamWidthDegV ///////////////////////////
//
// Antenna 3dB beam width V (deg).
//
// Measured Value, CMi, March 2019
//
// Type: double
//

beamWidthDegV = 0.73;

///////////// antGainDbH //////////////////////////////
//
// Antenna gain H (dB).
//
// Measured Value, CMi, March 2019
//
// Type: double
//

antGainDbH = 45.5;

///////////// antGainDbV //////////////////////////////
//
// Antenna gain V (dB).
//
// Measured Value, CMi, 2019
//
// Type: double
//

antGainDbV = 45.9;

///////////// twoWayWaveguideLossDbH //////////////////
//
// 2-way waveguide loss H (dB).
//
// This is the loss from the measurement plane to the feed-horn and 
//   back. Sometimes it is set to 0 and the loss is incorporated in the 
//   antenna gain.
//
//
// Type: double
//

twoWayWaveguideLossDbH = 0;

///////////// twoWayWaveguideLossDbV //////////////////
//
// 2-way waveguide loss V (dB).
//
// This is the loss from the measurement plane to the feed-horn and 
//   back. Sometimes it is set to 0 and the loss is incorporated in the 
//   antenna gain.
//
//
// Type: double
//

twoWayWaveguideLossDbV = 0;

///////////// twoWayRadomeLossDbH /////////////////////
//
// 2-way loss through the radome - H.
//
// Set to 0 if no radome.
//
// Measured Value, CMi March 2019
//
// Type: double
//

twoWayRadomeLossDbH = 3.4;

///////////// twoWayRadomeLossDbV /////////////////////
//
// 2-way loss through the radome - V.
//
// Set to 0 if no radome.
//
// Measured Value, CMi March 2019
//
// Type: double
//

twoWayRadomeLossDbV = 4.4;

///////////// receiverMismatchLossDb //////////////////
//
// Receiver mismatch loss - (dB).
//
// This is the loss which results from the fact that the receiver 
//   bandwidth is not exactly the same as the pulse width. The calibration 
//   procedure is carries out with a CW signal, so the redeiver bandwidth 
//   is not a factor. However, during operations, the receiver loses some 
//   power because of the bandwidth mismatch. This loss must be taken into 
//   account.
//
//
// Type: double
//

receiverMismatchLossDb = 2.3;

///////////// noiseSourcePowerDbmH ////////////////////
//
// Noise source power - H (dBm).
//
// Some operational calibrations are computed with a calbrated noise 
//   source of known power.
//
// Calculated with 256 ns PW & ENR 20.84 dB & T0 = 300K (Tsai)
//
// Type: double
//

noiseSourcePowerDbmH = -88.6214;

///////////// noiseSourcePowerDbmV ////////////////////
//
// Noise source power - V (dBm).
//
// Some operational calibrations are computed with a calbrated noise 
//   source of known power.
//
// Calculated with 256 ns PW & ENR 20.84 dB & T0 = 300K (Tsai)
//
// Type: double
//

noiseSourcePowerDbmV = -88.6214;

///////////// powerMeasLossDbH ////////////////////////
//
// Power measurement loss - H (dBm).
//
// This is the power loss from the signal generator to the waveguide 
//   coupler.
//
//
// Type: double
//

powerMeasLossDbH = 0;

///////////// powerMeasLossDbV ////////////////////////
//
// Power measurement loss - V (dBm).
//
// This is the power loss from the signal generator to the waveguide 
//   coupler.
//
//
// Type: double
//

powerMeasLossDbV = 0;

///////////// couplerForwardLossDbH ///////////////////
//
// Coupler loss - H (dB).
//
// This is the power loss in the directional coupler itself.
//
//
// Type: double
//

couplerForwardLossDbH = 0;

///////////// couplerForwardLossDbV ///////////////////
//
// Coupler loss - V (dB).
//
// This is the power loss in the directional coupler itself.
//
//
// Type: double
//

couplerForwardLossDbV = 0;

///////////// systemPhidpDeg //////////////////////////
//
// System PHIDP (deg).
//
// This is the approximate PHIDP value in the meteorlogical echo closest 
//   to the radar. Compute PHIDP is corrected using this value, so that 
//   the computed PHIDP closest to the radar is set to a value which 
//   minimizes the chance of folding.
//
//
// Type: double
//

systemPhidpDeg = 0;

//======================================================================
//
// ANALYSIS PARAMETERS.
//
//======================================================================
 
///////////// linear_region_min_power /////////////////
//
// power value at lower end of linear region (dBm).
//
//
// Type: double
//

linear_region_min_power = -87.5;

///////////// linear_region_max_power /////////////////
//
// power value at upper end of linear region (dBm).
//
// Determined with P1dB point for LNA
//
// Type: double
//

linear_region_max_power = -37.5;

///////////// noise_region_max_power //////////////////
//
// power value at upper end of noise region (dBm).
//
// Determined by Te of the receiver system 2285.32K
//
// Type: double
//

noise_region_max_power = -115;

///////////// snr_for_mds /////////////////////////////
//
// SNR for minimum detectable signal (dB).
//
// The minimum detectable signal is generally well below the noise. This 
//   is the SNR value for the MDS.
//
//
// Type: double
//

snr_for_mds = -6;

//======================================================================
//
// OUTPUT RESULTS.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Dir for output files.
//
// The results will be written to sub-directories named from the cal 
//   time.
//
//
// Type: string
//

output_dir = "$(PROJ_DIR)/calibration/data/wband_256ns/h_only";

///////////// output_file_label ///////////////////////
//
// Label imbedded in the file name.
//
// Ignored if empty.
//
//
// Type: string
//

output_file_label = "Wband-HCR-256ns";

///////////// plot_script /////////////////////////////
//
// If set, program will call script passing the output file names as the 
//   first argument.
//
// Typically, this script generates a plot and saves the output.
//
//
// Type: string
//

plot_script = "../scripts/do_calplot.dyn_range";

//======================================================================
//
// REPROCESSING OPTIONS.
//
//======================================================================
 
///////////// read_data_in_alt_column_order ///////////
//
// Option to read data file with alternative column order.
//
// TsCalAuto writes out the power data in the following order: hc, vc, 
//   hx, vx. Some systems, such as the SPOL ATE, writes out the data in 
//   hc, hx, vc, vx. If you set this option to true, the latter column 
//   order will be used to read in previously-stored data.
//
//
// Type: boolean
//

read_data_in_alt_column_order = FALSE;

